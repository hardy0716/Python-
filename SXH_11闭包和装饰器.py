# 闭包

# def a1(a,b):
#     c = 1
#     def a2():
#         s = a + b + c
#         print(f'相加的结果为{s}')
#     return  a2    # 不能加括号，加括号表示调用
# 变量名 = a1(3,5)  # 变量名就是函数2， 变量名 = 函数2 ，因为函数1的返回值是函数2
# 变量名()

# 修饰器:将  被装饰的函数  当作  参数  传递给  装饰器  对应的函数，并返回包装后的被装饰的函数。
# def a1(x):
#     def a2():
#         print('开始')
#         x()
#         print('结束')
#     return a2
#
# def a3():
#     print('李中涛')
#
# 变量名 = a1(a3)
# 变量名()

#Python发明了“@语法糖”，在计算机语言中添加某种语法，目的是让程序更简洁
#函数3无实参

# def 函数1(形参):
#     def 函数2():
#         print('开始调用函数3()参数')
#         形参()
#         print('结束调用函数3()参数')
#     return 函数2
# @函数1   #用函数1包装下面的函数3
# #这样就不用手动将函数3传给函数1的形参再将返回值重新赋值
# def 函数3():
#     print('内容')
# 函数3()


#函数3有一个实参
# def 函数1(形参):
#     def 函数2(name):
#         print('开始调用函数3()参数')
#         形参(name)
#         print('结束调用函数3()参数')
#     return 函数2
# @函数1
# def 函数3(name):
#     print(f'{name}要好好学习')
# 函数3('杨德馨')

#函数3有多个实参  *args
# def 函数1(形参):
#     def 函数2(*args):
#         print('开始调用函数3()参数')
#         形参(*args)
#         print('结束调用函数3()参数')
#     return  函数2
# @函数1   #包装结束
# def 函数3(time,order):
#     print(f'现在已经{time}了,杨德馨要好好{order}呀')
# 函数3('2022/04/13','学习')
#
# @函数1   #包装做好之后 可以重复使用
# def 函数4(age):
#     print(f'我的年龄是{age}岁')
# 函数4(20)

#含有未知参数 **kwargs
def 函数1(形参):
    def 函数2(*args,**kwargs):
        print('开始调用函数3()参数')
        形参(*args,**kwargs)
        print('结束调用函数3()参数')
    return  函数2
@函数1   #包装结束
def 函数3(time,order):
    print(f'现在已经{time}了,杨德馨要好好{order}呀')
函数3('2022/04/13','学习')

@函数1   #包装做好之后 可以重复使用
def 函数4(age):
    print(f'我的年龄是{age}岁')
函数4(20)

@函数1
def 函数5(name,age,**kwargs):
    print(f'我叫{name},今年{age}岁')
    print(kwargs)
函数5('李中涛',18,姓名='YDX',年龄=18,性别='female')










































